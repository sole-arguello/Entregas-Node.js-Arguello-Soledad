paths:
  #------- Ruta para obtener todos los productos -----------
  /api/products:
    #-------Metodo
    get:
      tags:
        - Products
      summary: Get all products
      responses:
        200:
          description: The list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        500:
          description: Internal server error 
    
    #-------Metodo
    post:
      tags:
        - Products
      summary: Create a new product
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/requestBodies/updateProduct'
      responses:
        200:
          description: The product was created correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSuccess'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorAuthorization'
        500:
          description: Internal server error

  #------- Ruta para obtener un producto por id --------------
  /api/products/{id}:
    #---metodo de petición
    get:
      tags:
        - Products
      summary: Get a product by ID
      parameters:
        - name: id
          in: path
          description: ID unique of the product
          required: true
          schema:
            $type: string
      responses:
        200:
          description: The product was obtained correctly
        404:
          description: The product was not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    #---metodo de petición
    put:          
      tags:
        - Products
      summary: Update a product
      parameters:
        - name: id
          in: path
          description: ID unique of the product updated
          required: true
          schema:
            $type: string
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/requestBodies/updateProduct'
      responses:
        200:
          description: The product was updated correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSuccess'

        404:
          description: The product was not found
        500:
          description: Internal server error

    #---metodo de petición
    delete:
      tags:
        - Products
      summary: Delete a product
      parameters:
        - name: id
          in: path
          description: ID unique of the product deleted
          required: true
          schema:
            $type: string
      responses:
        200:
          description: The product was deleted correctly
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/DeleteSuccess'
        404:
          description: The product was not found
        500:
          description: Internal server error  

#------ cuerpo del producto como ejemplo -------------
components:
  schemas:
    Product:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Id generated by data base mongoose
        title:
          type: string
          description: Title of the product
        description:
          type: string
          description: Description of the product
        price:
          type: number
          description: Price of the product
        code:
          type: string
          description: Code of the product alphanumeric
        stock:
          type: number
          description: Stock of the product
        category:
          type: string
          description: Category of the product
        thumbnail:
          type: array
          items:
            type: string
          description: Thumbnail of the product
        owner:
          type: ObjectId
          description: Owner of the product, default is admin
      
      example:
        _id: ObjectId("62b8a7b4b8a7b4b8a7b4b8a7")
        title: Bombis Maria
        description:  Prenda 100% algodon
        price: 10000
        code: ADC125
        stock: 10
        category: Bombis
        thumbnail: "img 3"
        owner: ObjectId("876a7b4b8a7b4b8a7b4b8a7b")
    #datos que se retornan al cliente    
    UpdateSuccess:
      type: object
      properties:
        status:
          type: string
        message:
          type: string 
      example:
        status: success
        message: Product updated

    CreateSuccess:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          $ref: '#/components/schemas/Product'
      example:
        status: success
        message: Product created


    DeleteSuccess:
      type: object
      properties:
        status:
          type: string
        message:  
          type: string
      example:
        status: success
        message: Product deleted
  #------- Request body para crear un nuevo producto ------------
  requestBodies:
    updateProduct:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        price:
          type: number
        code:
          type: string
        stock:
          type: number
        category:
          type: string
        thumbnail:
          type: array
          items:
            type: string

      example:
        title: Bombis Maria
        description:  Prenda 100% algodon
        price: 10000
        code: ADC125
        stock: 10
        category: Bombis
        thumbnail: "img 3"

 